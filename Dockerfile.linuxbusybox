# Stage 1: Build Linux kernel
FROM ubuntu AS linux_builder

# Install required build dependencies for the Linux kernel
RUN apt-get update && apt-get install -y --no-install-recommends build-essential wget tar xz-utils openssl libssl-dev elfutils-dev flex bison libelf-dev bc libncurses-dev curl

WORKDIR /linux

# Download and extract the Linux kernel source code
RUN wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.14.tar.xz && \
    tar -xf linux-5.14.tar.xz

# Enter the Linux kernel source code directory
WORKDIR /linux/linux-5.14

# Configure and build the Linux kernel
RUN make defconfig && \
    make -j$(nproc)

# Update the Kernel ABI header file in the tools directory
RUN cp arch/x86/include/asm/inat.h tools/arch/x86/include/asm/inat.h

# Stage 2: Build Busybox
FROM ubuntu AS busybox_builder

# Install required build dependencies for Busybox
RUN apt-get update && apt-get install -y build-essential wget tar openssl libssl-dev flex bison

# Set the working directory
WORKDIR /busybox

# Download and extract the Busybox source code
RUN wget https://busybox.net/downloads/busybox-1.34.0.tar.bz2 && \
    tar -xf busybox-1.34.0.tar.bz2

# Enter the Busybox source code directory
WORKDIR /busybox/busybox-1.34.0

# Configure and build Busybox
RUN make defconfig && \
    make -j$(nproc) && \
    sed -i '/^CONFIG_FEATURE_DIFF=y/s/^/# /' .config && \
    make

# Stage 3: Create the final image
FROM ubuntu

# Copy the Linux kernel image from the Linux builder stage
COPY --from=linux_builder /linux/linux-5.14/arch/x86/boot/bzImage /bzImage

# Copy the Busybox binary from the Busybox builder stage
COPY --from=busybox_builder /busybox/busybox-1.34.0/busybox /busybox

# Set the entry point to an empty command
ENTRYPOINT []
